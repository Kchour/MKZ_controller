#!/usr/bin/env python
import rospy
from vehicle_controllers.algorithm import SteeringMethods
from vehicle_controllers.utility import RosCallbackDefine
import yaml
import pdb
import os


#### TO CHANGE ROS WORKING DIRECTORY
#### export ROS_HOME=$HOME 
#### CHANGE IN package.xml file

#### USAGE
#    SIMPLY IMPORT OR CREATE AN INSTACE OF CLASS LongController
#    or run it 
		
class LatController:
   def __init__(self):
	path = os.path.dirname(os.path.abspath(__file__))
	wpfile = path +'/'+ rospy.get_param("~waypoints_file","odom_waypoints.dat")
	vehicle = rospy.get_param("~vehicle","MKZ")
	#### READ YAML FILE	
	with open(path+"/../config/"+vehicle+".yaml",'r') as stream:
		data_loaded = yaml.safe_load(stream)
	lookAhead = data_loaded['lookAhead']
	wheelBase = data_loaded['wheelBase']
	steeringRatio = data_loaded['steeringRatio']
	steerLim_upper = data_loaded['steerLim']['upper']
	steerLim_lower = data_loaded['steerLim']['lower']
	#### PARAMETERS FOR ADAPTIVE VELOCITY AND LOOKAHEAD	
	lMin = data_loaded['Adaptive']['lMin']
	lMax = data_loaded['Adaptive']['lMax']
	vMin = data_loaded['Adaptive']['vMin']
	vMax = data_loaded['Adaptive']['vMax']
	gamma = data_loaded['Adaptive']['gamma']
	ayLim = data_loaded['Adaptive']['ayLim']
	#### CREATE SteeringFeedForward Object. Pass in the waypoints
	steeringFF = SteeringMethods(wpfile,lookAhead,wheelBase,steeringRatio)	#Using default mkz values, otherwise specify them: lookAhead = 10.0, wheelBase = 2.85, steeringRatio = 14.8
	topic_helper = RosCallbackDefine(vehicle)		
	#### CREATE LOOP 
	rate=rospy.Rate(50)
	while not rospy.is_shutdown():
		# methodPurePursuit function 
		# will use default values, otherwise specify them: lookAhead=self.LA,WheelBase=self.WB,SteeringRatio=self.SR
		# Returns steercmd, curv, eastingBearing,relativeBearing, self.targetPoint
		states = topic_helper.return_states()
		if len(states) > 1:
			linearX = states[0]
			poseX = states[1]
			poseY = states[2]
			yaw = states[3]
			steercmd, curv, absoluteBearing, relativeBearing, targetPoint = steeringFF.methodPurePursuit(poseX,poseY,yaw)		# Calculate steering 

			# set variable lookahead
			#steeringFF.methodAdaptiveLookAhead(lMin, lMax, gamma, poseX, poseY, yaw, linearX, curv)
			# set variable speed
    			#vCmd = steeringFF.methodAdaptiveVelocity(vMin, vMax, ayLim, curv)
			# limit the steering angle
			steercmd_f = self.sat_limit(steercmd,steerLim_lower,steerLim_upper)
			# Publish the steering cmd
			topic_helper.publish_vehicle_lat(steercmd)			
			# Publish the desired velocity			
			#topic_helper.setDesiredVelocity(vCmd)
                        print "\n SteerCmd: {} \n Curv: {}".format(steercmd, curv)
		rate.sleep()


   def sat_limit(self,val,low,upper):
		if val >= upper:
			return upper
		elif val <= low:
			return low
		else:
			return val

    
if __name__=="__main__":
    rospy.init_node("lat_controller_node")
    try:
        latcontroller = LatController()
    except rospy.ROSInterruptException:
        pass


    


