#!/usr/bin/env python
import rospy
from vehicle_controllers.algorithm import SteeringMethods
from vehicle_controllers.utility import RosCallbackDefine
import pdb


#### TO CHANGE ROS WORKING DIRECTORY
#### export ROS_HOME=$HOME 
#### CHANGE IN package.xml file

#### USAGE
#    SIMPLY IMPORT OR CREATE AN INSTACE OF CLASS LongController
#    or run it 
		
class LatController:
    def __init__(self):
	wpfile = rospy.get_param('waypoints_file',"odom_waypoints.dat")
	#### CREATE SteeringFeedForward Object. Pass in the waypoints
	steeringFF = SteeringMethods(wpfile)	#Using default mkz values, otherwise specify them: LookAhead = 10.0, WheelBase = 2.85, SteeringRatio = 14.8
	topic_helper = RosCallbackDefine("MKZ")		
	#### CREATE LOOP 
	rate=rospy.Rate(50)
	while not rospy.is_shutdown():
		# methodPurePursuit function 
		# will use default values, otherwise specify them: lookAhead=self.LA,WheelBase=self.WB,SteeringRatio=self.SR
		# Returns steercmd, curv, eastingBearing,relativeBearing, self.targetPoint
		states = topic_helper.return_states()
		if len(states) > 1:
			linearX = states[0]
			pose_x = states[1]
			pose_y = states[2]
			yaw = states[3]
			#print states
			steercmd, curv, absoluteBearing, relativeBearing, targetPoint = steeringFF.methodPurePursuit(pose_x,pose_y,yaw)		# Calculate steering 
			topic_helper.publish_vehicle_lat(steercmd)									# Publish the steering cmd	
		rate.sleep()

    
if __name__=="__main__":
    rospy.init_node("lat_controller_node")
    try:
        latcontroller = LatController()
    except rospy.ROSInterruptException:
        pass


    


