#!/usr/bin/env python

#### WIP SCRIPT #### 
#### THIS SCRIPT IS USED TO CREATE FUSE SENSOR IN VEHICLE ####
#### This requires xsens_mti_ros_node custom_msgs package ####
#### See their old github #### 
#### Create a kalman filter class #### 
import rospy
from nav_msgs.msg import Odometry
from vehicle_controllers.msg import customOdom2
from std_msgs.msg import Float64
from sensor_msgs.msg import NavSatFix
import tf
import utm
import numpy as np
import sys
import pdb

class MessageHandle:
    def __init__(self):
        #### XY (CONVERT TO UTM METERS)
        #### RPY (CONVERT TO RADIANS)
        self.x = 0.0
        self.y = 0.0
        self.z = 0.0
        self.roll = 0.0
        self.pitch = 0.0
        self.yaw = 0.0
        self.qx = 0.0
        self.qy = 0.0
        self.qz = 0.0
        self.qw = 0.0

    def returnStates(self):
        return [self.x, self.y, self.z, self.roll, self.pitch, self.yaw, 
                self.qx, self.qy, self.qz, self.qw]

    def callback(self,msg,args):
        if args[0] == "MKZSIM":
            self._mkzSim(msg,args)
        if args[0] == "MKZREAL":
            self._mkzReal(msg,args)
        if args[0] == "POLARIS":
            self._polaris(msg,args)

    def _mkzSim(self,msg,args):
        # args[1] = "message type string"
        if args[1] == "POSITION":
            temp = utm.from_latlon(msg.latitude, msg.longitude)
            self.x = temp[0]
            self.y = temp[1]
        if args[1] == "ORIENTATION":
            self.yaw = np.radians(msg.data)
            q=tf.transformations.quaternion_from_euler(0.0,0.0,self.yaw)
            self.qx = q[0]
            self.qy = q[1]
            self.qz = q[2]
            self.qw = q[3]
            #### ODOMETRY
            #q = msg.pose.pose.orientation
            #euler = tf.transformations.euler_from_quaternion(q.x, q.y, q.z, q.w)
            #self.qx = q.x
            #self.qy = q.y
            #self.qz = q.z
            #self.qw = q.w
            #self.roll = euler[0]
            #self.pitch = euler[1]
            #self.yaw = euler[2]

    def _mkzReal(self,msg,args):
        if args[1] == "POSITION":
            temp = utm.from_latlon(msg.latitude, msg.longitude)
            self.x = temp[0]
            self.y = temp[1]
        if args[1] == "ORIENTATION":
            self.roll = np.radians(msg.roll)
            self.pitch = np.radians(msg.pitch)
            self.yaw = np.radians(msg.yaw)
            q = tf.transformations.quaternion_from_euler(self.roll, self.pitch, self.yaw)
            self.qx = q[0] 
            self.qy = q[1] 
            self.qz = q[2] 
            self.qw = q[3] 

    def _polaris(self,msg,args):
        if args[1] == "POSITION":
            temp = utm.from_latlon(msg.latitude, msg.longitude)
            self.x = temp[0]
            self.y = temp[1]
        if args[1] == "ORIENTATION":
            q = msg.pose.pose.orientation
            euler = tf.transformations.euler_from_quaternion(q.x, q.y, q.z, q.w)
            self.qx = q.x
            self.qy = q.y
            self.qz = q.z
            self.qw = q.w
            self.roll = euler[0]
            self.pitch = euler[1]
            self.yaw = euler[2]


#### MAIN PART OF THE SCRIPT BEGINS HERE

mh=MessageHandle() 
argv = sys.argv #receive from user input

x = 0.0
y = 0.0
z = 0.0
roll = 0.0
pitch = 0.0
yaw = 0.0
qx = 0.0
qy = 0.0
qz = 0.0
qw = 0.0

rospy.init_node("sensor_fusion_node")

#### SPECIFY THE SENSOR TOPICS BELOW

try:
    #### MKZ SIMULATION
    if argv[1] == "MKZSIM":
        rospy.Subscriber("/vehicle/perfect_gps/heading", Float64, mh.callback,("MKZSIM","ORIENTATION"))
        rospy.Subscriber("/vehicle/perfect_gps/fix", NavSatFix, mh.callback, ("MKZSIM","POSITION"))
    #### MKZ REAL
    elif argv[1] == "MKZREAL":
        from custom_msgs.msg import positionEstimate
        from custom_msgs.msg import orientationEstimate
        rospy.Subscriber("/mti/filter/orientation", orientationEstimate, mh.callback,("MKZREAL","ORIENTATION"))
        rospy.Subscriber("/mti/filter/position", positionEstimate, mh.callback, ("MKZREAL","POSITION"))
    #### POLARIS
    elif argv[1] == "POLARIS":
        rospy.Subscriber("/vectornav/GPS",NavSatFix, mh.callback, ("POLARIS","POSITION"))
        rospy.Subscriber("/vectornav/Odom",Odometry, mh.callback, ("POLARIS","ORIENTATION"))
except Exception as error:
    print error
    raise ValueError("\n\nUsage: python odompubtest.py [OPTIONS] \n\n Options:\n\t MKZSIM \t subscribe to topics from simulated mkz \n\t MKZREAL\t subscribe to topics from real mkz \n\t POLARIS  \t subscribe to topics from polaris vehicle")

#### PUBLISHER
oEulerPub = rospy.Publisher("/vehicle/odom2", customOdom2, queue_size=1)
oQuatPub = rospy.Publisher("/vehicle/odom1", Odometry, queue_size=1)

odomQuat = Odometry()
odomEuler = customOdom2()

#count = 1
rate = rospy.Rate(50)
while not rospy.is_shutdown():
	#### Fill in the messages for quaternion odometry 
        x,y,z,roll,pitch,yaw,qx,qy,qz,qw=mh.returnStates()
	odomQuat.pose.pose.orientation.x = qx
	odomQuat.pose.pose.orientation.y = qy
	odomQuat.pose.pose.orientation.z = qz
	odomQuat.pose.pose.orientation.w = qw
	odomQuat.pose.pose.position.x = x	
	odomQuat.pose.pose.position.y = y	
	odomQuat.pose.pose.position.z = z	
	odomQuat.header.frame_id = "Kenny"
	#odomQuat.header.seq = count
	odomQuat.header.stamp = rospy.Time.now()
	#### Fill in euler odometry
	odomEuler.x = x
	odomEuler.y = y
	odomEuler.z = z
	odomEuler.roll = roll
	odomEuler.pitch = pitch
	odomEuler.yaw = yaw
	#odomEuler.header.seq = count
	odomEuler.header.stamp = rospy.Time.now()	
	#### Publish 	
	oQuatPub.publish(odomQuat)
	oEulerPub.publish(odomEuler)
	#### Sleep and count
	#count += 1
	print "\t x[utm]={} \n\t y[utm]={} \n\t z[m]={} \n\t roll[rad]={} \n\t pitch[rad]={} \n\t yaw[rad]={} \n\t qx={} \n\t qy={} \n\t qz={} \n\t qw={} \n".format(x,y,z,roll,pitch,yaw,qx,qy,qz,qw)
	rate.sleep()




