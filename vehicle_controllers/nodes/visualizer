#!/usr/bin/env python

# See https://answers.ros.org/question/11135/plotting-a-markerarray-of-spheres-with-rviz/
import rospy
import numpy as np
from visualization_msgs.msg import Marker
from visualization_msgs.msg import MarkerArray
from nav_msgs.msg import Odometry
from threading import Thread, Lock
import math
import tf

global xpos, ypos, quat, cb_flag
cb_flag = 0
odomMutex = Lock()

filename = "odom_waypoints.dat"
wp_list  = np.loadtxt(filename,delimiter=',')
markerArray = MarkerArray()
i = 0
cnt = 0
for wp in wp_list:
	if cnt	% 10 == 0:
		yaw = math.atan2(wp[1],wp[0])
		q = tf.transformations.quaternion_from_euler(yaw,0,0)
		marker = Marker()
		marker.header.frame_id = "odom"
		marker.type = marker.SPHERE
		marker.action = marker.ADD
		marker.scale.x = 0.5
		marker.scale.y = 0.5
		marker.scale.z = 0.5
		marker.color.a = 1.0
		marker.color.r = 1.0
		marker.color.g = 1.0
		marker.color.b = 0.0
		marker.pose.orientation.w = q[3]#1.0
		marker.pose.orientation.x= q[0]#0.0
		marker.pose.orientation.y = q[1]#0.0
		marker.pose.orientation.z = q[2]#0.0
		marker.pose.position.x = wp[0]
		marker.pose.position.y = wp[1]
		marker.pose.position.z = 0.0
	
		# Append and number markers id
		marker.id = i
		markerArray.markers.append(marker)
		i+=1
	cnt += 1

def _odom_cb(msg):
	global xpos, ypos, quat, cb_flag
	odomMutex.acquire()
	xpos = msg.pose.pose.position.x
	ypos = msg.pose.pose.position.y
	quat = msg.pose.pose.orientation
	cb_flag = 1
	odomMutex.release()

rospy.init_node("wp_visualizer_node")
wpvispub = rospy.Publisher("/visualizer/waypoints",MarkerArray,queue_size=1000)
vehvispub = rospy.Publisher("/visualizer/vehicle",MarkerArray,queue_size=1000)
rospy.Subscriber("/odometry/filtered",Odometry,_odom_cb)

r = rospy.Rate(10)

timePrev = 0
count = 0
MARKERS_MAX = 200
vehMarkerArray = MarkerArray()
while not rospy.is_shutdown():
	# The vehicle's waypoints
	timeNow = rospy.get_time()
	if  (timeNow - timePrev > 5) or (timePrev == 0):
		wpvispub.publish(markerArray)
		timePrev = rospy.get_time()
		print "reading waypoints success"
	
	if cb_flag == 1:
		# For the vehicle current odom
		marker = Marker()
		marker.header.frame_id = "odom"
		marker.type = marker.SPHERE
		marker.action = marker.ADD
		marker.scale.x = 2
		marker.scale.y = 2
		marker.scale.z = 2
		marker.color.a = 1.0
		marker.color.r = 0.0
		marker.color.g = 1.0
		marker.color.b = 1.0
		odomMutex.acquire()
		marker.pose.orientation.w = quat.w#1.0
		marker.pose.orientation.x= quat.x#0.0
		marker.pose.orientation.y = quat.y#0.0
		marker.pose.orientation.z = quat.z#0.0
		marker.pose.position.x = xpos
		marker.pose.position.y = ypos
		marker.pose.position.z = 0.0

		if(count > MARKERS_MAX):
       			vehMarkerArray.markers.pop(0)
		count += 1
		odomMutex.release()
		vehMarkerArray.markers.append(marker)
		# Renumber the marker IDs
		id_ = 0
		for m in vehMarkerArray.markers:
			m.id = id_
			id_ += 1
		print "odom cb success",i, id_
		# publish veh current odom
		vehvispub.publish(vehMarkerArray)
	r.sleep()

	

